/* tslint:disable */
/* eslint-disable */
/**
 * Private Proof Delegation-CCL
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@taceo.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  AuxiliaryType,
  BlueprintReadyProbe,
  CreateBlueprintRequest,
  CreateBlueprintResponse,
  IssueCoSnarkCodeRequest,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    AuxiliaryTypeFromJSON,
    AuxiliaryTypeToJSON,
    BlueprintReadyProbeFromJSON,
    BlueprintReadyProbeToJSON,
    CreateBlueprintRequestFromJSON,
    CreateBlueprintRequestToJSON,
    CreateBlueprintResponseFromJSON,
    CreateBlueprintResponseToJSON,
    IssueCoSnarkCodeRequestFromJSON,
    IssueCoSnarkCodeRequestToJSON,
} from '../models/index';

export interface BlueprintReadyRequest {
    id: string;
}

export interface CreateRequest {
    createBlueprintRequest: CreateBlueprintRequest;
}

export interface IssueCosnarkCodeRequest {
    issueCoSnarkCodeRequest: IssueCoSnarkCodeRequest;
}

export interface UploadAuxDataRequest {
    id: string;
    auxType: AuxiliaryType;
    file: Blob;
}

/**
 * 
 */
export class BlueprintApi extends runtime.BaseAPI {

    /**
     * checks whether a blueprint is already ready
     */
    async blueprintReadyRaw(requestParameters: BlueprintReadyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlueprintReadyProbe>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling blueprintReady().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/blueprint/{id}/ready`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlueprintReadyProbeFromJSON(jsonValue));
    }

    /**
     * checks whether a blueprint is already ready
     */
    async blueprintReady(requestParameters: BlueprintReadyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlueprintReadyProbe> {
        const response = await this.blueprintReadyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a new coSNARK blueprint
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateBlueprintResponse>> {
        if (requestParameters['createBlueprintRequest'] == null) {
            throw new runtime.RequiredError(
                'createBlueprintRequest',
                'Required parameter "createBlueprintRequest" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/blueprint/create`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBlueprintRequestToJSON(requestParameters['createBlueprintRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateBlueprintResponseFromJSON(jsonValue));
    }

    /**
     * create a new coSNARK blueprint
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateBlueprintResponse> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a new job
     */
    async issueCosnarkCodeRaw(requestParameters: IssueCosnarkCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['issueCoSnarkCodeRequest'] == null) {
            throw new runtime.RequiredError(
                'issueCoSnarkCodeRequest',
                'Required parameter "issueCoSnarkCodeRequest" was null or undefined when calling issueCosnarkCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/blueprint/code`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: IssueCoSnarkCodeRequestToJSON(requestParameters['issueCoSnarkCodeRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * create a new job
     */
    async issueCosnarkCode(requestParameters: IssueCosnarkCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.issueCosnarkCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * add proving key to blueprint
     */
    async uploadAuxDataRaw(requestParameters: UploadAuxDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling uploadAuxData().'
            );
        }

        if (requestParameters['auxType'] == null) {
            throw new runtime.RequiredError(
                'auxType',
                'Required parameter "auxType" was null or undefined when calling uploadAuxData().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadAuxData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/v1/blueprint/{id}/aux/{aux_type}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"aux_type"}}`, encodeURIComponent(String(requestParameters['auxType']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * add proving key to blueprint
     */
    async uploadAuxData(requestParameters: UploadAuxDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadAuxDataRaw(requestParameters, initOverrides);
    }

}
