/* tslint:disable */
/* eslint-disable */
/**
 * TACEO:Proof - CCL
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@taceo.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  JobResult,
  JobType,
  ScheduleJobResponse,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    JobResultFromJSON,
    JobResultToJSON,
    JobTypeFromJSON,
    JobTypeToJSON,
    ScheduleJobResponseFromJSON,
    ScheduleJobResponseToJSON,
} from '../models/index';

export interface GetResultRequest {
    id: string;
}

export interface ScheduleJobRequest {
    aBlueprintId: string;
    bJobType: JobType;
    cCode: string;
    inputParty0: Blob;
    inputParty1: Blob;
    inputParty2: Blob;
}

/**
 * 
 */
export class JobApi extends runtime.BaseAPI {

    /**
     * get job result
     */
    async getResultRaw(requestParameters: GetResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getResult().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/jobs/job/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobResultFromJSON(jsonValue));
    }

    /**
     * get job result
     */
    async getResult(requestParameters: GetResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobResult> {
        const response = await this.getResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a new job
     */
    async scheduleJobRaw(requestParameters: ScheduleJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleJobResponse>> {
        if (requestParameters['aBlueprintId'] == null) {
            throw new runtime.RequiredError(
                'aBlueprintId',
                'Required parameter "aBlueprintId" was null or undefined when calling scheduleJob().'
            );
        }

        if (requestParameters['bJobType'] == null) {
            throw new runtime.RequiredError(
                'bJobType',
                'Required parameter "bJobType" was null or undefined when calling scheduleJob().'
            );
        }

        if (requestParameters['cCode'] == null) {
            throw new runtime.RequiredError(
                'cCode',
                'Required parameter "cCode" was null or undefined when calling scheduleJob().'
            );
        }

        if (requestParameters['inputParty0'] == null) {
            throw new runtime.RequiredError(
                'inputParty0',
                'Required parameter "inputParty0" was null or undefined when calling scheduleJob().'
            );
        }

        if (requestParameters['inputParty1'] == null) {
            throw new runtime.RequiredError(
                'inputParty1',
                'Required parameter "inputParty1" was null or undefined when calling scheduleJob().'
            );
        }

        if (requestParameters['inputParty2'] == null) {
            throw new runtime.RequiredError(
                'inputParty2',
                'Required parameter "inputParty2" was null or undefined when calling scheduleJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['aBlueprintId'] != null) {
            formParams.append('a_blueprint_id', requestParameters['aBlueprintId'] as any);
        }

        if (requestParameters['bJobType'] != null) {
            formParams.append('b_job_type', requestParameters['bJobType'] as any);
        }

        if (requestParameters['cCode'] != null) {
            formParams.append('c_code', requestParameters['cCode'] as any);
        }

        if (requestParameters['inputParty0'] != null) {
            formParams.append('input_party0', requestParameters['inputParty0'] as any);
        }

        if (requestParameters['inputParty1'] != null) {
            formParams.append('input_party1', requestParameters['inputParty1'] as any);
        }

        if (requestParameters['inputParty2'] != null) {
            formParams.append('input_party2', requestParameters['inputParty2'] as any);
        }

        const response = await this.request({
            path: `/api/v1/jobs/schedule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleJobResponseFromJSON(jsonValue));
    }

    /**
     * create a new job
     */
    async scheduleJob(requestParameters: ScheduleJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleJobResponse> {
        const response = await this.scheduleJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
