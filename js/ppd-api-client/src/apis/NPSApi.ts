/* tslint:disable */
/* eslint-disable */
/**
 * Private Proof Delegation-CCL
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@taceo.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  RegisterNpsRequest,
  RegisterNpsResponse,
} from '../models/index';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    RegisterNpsRequestFromJSON,
    RegisterNpsRequestToJSON,
    RegisterNpsResponseFromJSON,
    RegisterNpsResponseToJSON,
} from '../models/index';

export interface RegisterRequest {
    registerNpsRequest: RegisterNpsRequest;
}

/**
 * 
 */
export class NPSApi extends runtime.BaseAPI {

    /**
     * register a new node provider
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterNpsResponse>> {
        if (requestParameters['registerNpsRequest'] == null) {
            throw new runtime.RequiredError(
                'registerNpsRequest',
                'Required parameter "registerNpsRequest" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/nps/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterNpsRequestToJSON(requestParameters['registerNpsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterNpsResponseFromJSON(jsonValue));
    }

    /**
     * register a new node provider
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterNpsResponse> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
